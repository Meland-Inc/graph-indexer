enum OrderStatus @entity {
	open
	sold
	cancelled
}

enum NFTStoreStatus @entity {
	open
	sold
	cancelled
}

enum ItemType @entity {
	undefined
	thirdparty
	ticketland
	vipland
	placeable
	wearable
	tier
	futures
	viplandfutures
}

enum LogAction @entity {
	transfer
	createorder
	cancelorder
	updateorder
	bought
}

# NFT协议
# 区分erc721和erc1155
enum NFTProtocol @entity {
	erc721
	erc1155
}

type NFTMetadataOrigin @entity {
"""
uri to hex
"""
	id: ID!

	value: Bytes!
}

# 由于1155的复杂度, 可以实现NFT, Token, 和半NFT 
# 关于1155目前我们只支持基于1155实现的NFT
# 半NFT和token因为缺乏识别机制暂时不支持
type ERC1155Reward @entity {
	id: ID!
	nft: NFT!
	reward: MelandTierReward!
}

type ERC721Reward @entity {
	id: ID!
	nft: NFT!
	reward: MelandTierReward!
}

type ERC20Reward @entity {
	id: ID!
	reward: MelandTierReward!
	symbol: String!
	name: String!
	amount: BigInt!
}

type MelandTierReward @entity {
	id: ID!
	erc20rewards: [ERC20Reward!] @derivedFrom(field: "reward")
	erc721rewards: [ERC721Reward!] @derivedFrom(field: "reward")
	erc1155rewards: [ERC1155Reward!] @derivedFrom(field: "reward")
}

type OpenMelandTierReward @entity {
	id: ID!
	txHash: Bytes!
	reward: MelandTierReward!
}

# 购买日志
type BoughtLog @entity {
	id: ID!
	nft: NFT!
	acceptedToken: ERC20!
	priceInWei: BigInt!
}

type UpdateorderLog @entity {
	id: ID!
	order: Order!
}

type CancelorderLog @entity {
	id: ID!
	order: Order!
}

type CreateorderLog @entity {
	id: ID!
	order: Order!
}

type TransferLog @entity {
	id: ID!
	to: Web3IAccount!
	nft: NFT!
}

type Web3Log @entity {
	id: ID!

	"""
	操作账号
	"""
	account: Web3IAccount!
	createdAt: BigInt!

	action: LogAction!
	
	transfer: TransferLog
	createorder: CreateorderLog
	cancelorder: CancelorderLog
	updateorder: UpdateorderLog
	bought: BoughtLog
}

type NFTSupport @entity {
	id: ID!
	address: Bytes!
	nftProtocol: NFTProtocol!
}

type RcCoordinates @entity {
	id: ID!
	r: BigInt!
	c: BigInt!
}

type Vipland @entity {
	id: ID!
	imageURL: String!
	rcCoordinates: RcCoordinates
}

type Tikcetland @entity {
	id: ID!
	imageURL: String!
	rcCoordinates: RcCoordinates
}

# 放置类道具
type Placeable @entity {
	id: ID!

	rarity: String!
	imageURL: String!
	cid: String!
}

type Thirdparty @entity {
	id: ID!
	imageURL: String!
}

type Wearable @entity {
	id: ID!
	imageURL: String!
	cid: String!
}

type Tier @entity {
	id: ID!
	imageURL: String!
}

type Future @entity {
	id: ID!
	imageURL: String!
	amount: BigInt!
	unlockAt: BigInt!
}

type Viplandfuture @entity {
	id: ID!
	imageURL: String!
}

type Web3IAccount @entity {
	id: ID! # ETH addr
	address: Bytes!
	imageURL: String!
	nfts: [NFT!] @derivedFrom(field: "owner")
	balanceOfMELD: BigInt!
}

type _ExchangeMELDHistoryMeta_ @entity {
	id: ID!

	beneficiary: Bytes!

	count: BigInt!
}

type _DepositDitaminHistoryMeta_ @entity {
	id: ID!

	beneficiary: Bytes!

	count: BigInt!
}

type _FutureClaimMeta_ @entity {
	id: ID!

	beneficiary: Bytes!

	count: BigInt!
}

type FutureAmount @entity {
	id: ID!

	beneficiary: Bytes!

	amount: BigInt!

	count: BigInt!
}

type ExchangeMELDHistory @entity {
	id: ID!
	"""
	兑换时间
	"""
	exchangedAt: BigInt!

	amountOfMELD: BigInt!

	beneficiary: Bytes!

	paymentDitamin: BigInt!

	"""
	支付时间
	"""
	paymentAt: BigInt!
}

type DepositDitaminHistory @entity {
	id: ID!
	"""
	兑换时间
	"""
	depositedAt: BigInt!

	amountOfMELD: BigInt!

	beneficiary: Bytes!

	paymentDitamin: BigInt!

	"""
	支付时间
	"""
	paymentAt: BigInt!
}

type FutureClaim @entity {
	id: ID!

	"""
	收益人
	"""
	beneficiary: Bytes!

	amount: BigInt!

	claimedAt: BigInt!
}

type Metadata @entity {
	"""
	metadata id
	规则
	itemtype-自定义属性
	"""
	id: ID!
	itemType: ItemType!
	description: String!
	nftProtocol: NFTProtocol!
	vipland: Vipland
	ticketland: Tikcetland
	placeable: Placeable
	thirdparty: Thirdparty
	wearable: Wearable
	tier: Tier
	future: Future
	viplandfutures: Viplandfuture
}

type SupplyQuantity @entity {
	id: ID!
	"""
	已经卖出数量
	"""
	soldCount: BigInt!
	"""
	最大供应量
	"""
	maxSupply: BigInt!
}

type Order @entity {
	id: ID!
	nft: NFT
	nftAddress: Bytes!
	blockNumber: BigInt!
"""
最大供应量
"""
	supplyQuantity: SupplyQuantity!

"""
商品源信息
"""
	metadata: Metadata!
"""
稀有度
"""
	rarity: String
"""
描述信息
"""
	tokenId: BigInt!
	txHash: Bytes!
"""
类别, 装备代号. 一个系列名
比如 ticket-land
"""
	symbol: String!
	name: String!

	owner: Web3IAccount!
"""
购买者
"""
	buyer: Bytes
"""
价格
"""
	price: BigInt!
	status: OrderStatus!
	expiresAt: BigInt!
	createdAt: BigInt!
	updatedAt: BigInt!
}

type ERC20 @entity {
	id: ID!
	name: String!
	symbol: String!
	imageURL: String!
}

type NFTStoreItemBuyCallbackStateStore @entity {
	id: ID!
	buyCallbackStates: String!
}

type NFTStoreItemAll @entity {
	id: ID!
	items: [NFTStoreItem!]!
}

type NFTStoreItem @entity {
	id: ID!
	collection: NFTStoreItemAll!
	nftAddress: Bytes!
	txHash: Bytes!
	tokenURI: String
	blockNumber: BigInt!
"""
供应量信息
"""
	supplyQuantity: SupplyQuantity!
"""
稀有度
"""
	rarity: String
"""
Return parameters at the time of purchase
"""
	buyCallbackState: String!
"""
类别, 装备代号. 一个系列名
比如 ticket land
"""
	symbol: String!
	name: String!
"""
当前剩余库存
"""
	currentStockQuantity: BigInt!
	owner: Web3IAccount!
"""
当前接受的货币单位
"""
	acceptedToken: ERC20!
"""
价格,单位gwei. 18位数
1000000000000000000 gwei = 1 个
"""
	price: BigInt!
"""
商品源信息
"""
	metadata: Metadata!
"""
商品状态
"""
	status: NFTStoreStatus!
"""
上架时间
"""
	createdAt: BigInt!
	updatedAt: BigInt!

"""
限购数量
如果为0则表示不限购
"""
	limit: BigInt!
}

type NFT @entity {
	id: ID!
	tokenId: BigInt!
	contractAddress: Bytes!
"""
最大供应量
"""
	supplyQuantity: SupplyQuantity!
	metadata: Metadata!
"""
稀有度
"""
	rarity: String
	isMeLandAI: Boolean!
	owner: Web3IAccount!
	# 类别, 装备代号. 一个系列名
	# 比如 ticket land
	symbol: String!
	name: String!
	tokenURI: String
	orders: [Order!] @derivedFrom(field: "nft") # History of all orders. Should only ever be ONE open order. all others must be cancelled or sold
	activeOrder: Order
	createdAt: BigInt!
	updatedAt: BigInt!
	soldAt: BigInt
}

type Web3Config @entity {
	id: ID!

	value: String!
}